var areaJSON={"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[44.9301, 23.6577, 22.7367, 20.7519, 14.4269], "total":[198991, 388525, 563, 219, 157], "name":"Kernel System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"Static Partition", "type":"partition", "children":[{"name":"Board interface", "type":"resource", "data":[179950, 358572, 492, 123, 0], "details":[{"type":"text", "text":"Platform interface logic."}]}]}, {"name":"Global interconnect", "type":"resource", "data":[5034, 9568, 52, 0, 0], "details":[{"type":"text", "text":"Global interconnect for 1 global load and 1 global store."}, {"type":"brief", "text":"For 1 global load and 1 global store."}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Global Memory Interconnect", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}]}]}, {"name":"System description ROM", "type":"resource", "data":[0, 67, 2, 0, 0], "details":[{"type":"text", "text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program."}, {"type":"brief", "text":"Contains information for the host."}]}, {"name":"SimpleMath", "compute_units":1, "type":"function", "total_percent":[2.99774, 2.00691, 1.18902, 0.626613, 6.32411], "total_kernel_resources":[14007, 20318, 17, 96, 157], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1338, 2411, 0, 0, 10], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"Coalesced Private Variables: \\n - \'LinearIndex\' (accessor.hpp:1537)\\n - \'LinearIndex\' (accessor.hpp:1523)\\n - \'i\' (fpga_reg.cpp:97)", "type":"resource", "data":[7, 69, 0, 0, 0], "debug":[[{"filename":"accessor.hpp", "line":1523}], [{"filename":"accessor.hpp", "line":1537}], [{"filename":"fpga_reg.cpp", "line":97}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 65 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 65 width by 1 depth"}]}, {"name":"Coalesced Private Variables: \\n - \'coeff\' (fpga_reg.cpp:91)\\n - \'tmp\' (fpga_reg.cpp:131)", "type":"resource", "data":[7, 36, 0, 0, 0], "debug":[[{"filename":"fpga_reg.cpp", "line":91}], [{"filename":"fpga_reg.cpp", "line":131}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 32 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 32 width by 1 depth"}]}, {"name":"Private Variable: \\n - \'coeff\' (fpga_reg.cpp:91)", "type":"resource", "data":[1824, 8147, 0, 0, 0], "debug":[[{"filename":"fpga_reg.cpp", "line":91}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"127 registers of width 32 bits and depth 1"}, {"type":"brief", "text":"Register,\\n127 regs, 32 width by 1 depth"}]}, {"name":"Private Variable: \\n - \'i\' (fpga_reg.cpp:92)", "type":"resource", "data":[14, 79, 0, 0, 0], "debug":[[{"filename":"fpga_reg.cpp", "line":92}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 7 bits and depth 1"}, {"type":"text", "text":"1 register of width 64 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 7 width by 1 depth,\\n1 reg, 64 width by 1 depth"}]}, {"name":"Private Variable: \\n - \'i\' (fpga_reg.cpp:97)", "type":"resource", "data":[7, 68, 0, 0, 0], "debug":[[{"filename":"fpga_reg.cpp", "line":97}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 64 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 64 width by 1 depth"}]}, {"name":"SimpleMath.B0", "type":"basicblock", "children":[{"name":"Feedback", "type":"resource", "data":[8, 2, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[8, 2, 0, 0, 0]}]}]}, {"name":"SimpleMath.B1", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[1, 66, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"fpga_reg.cpp:97", "type":"resource", "data":[1, 66, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":97}]]}]}, {"name":"Computation", "type":"resource", "children":[{"name":"fpga_reg.cpp:97", "type":"resource", "data":[152, 65, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":97}]], "children":[{"name":"64-bit Integer Compare", "type":"resource", "count":2, "data":[88, 1, 0, 0, 0]}, {"name":"64-bit Select", "type":"resource", "count":1, "data":[64, 64, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"SimpleMath.B2", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[0, 2051, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[0, 3, 0, 0, 0]}, {"name":"fpga_reg.cpp:93", "type":"resource", "data":[0, 2048, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":93}]]}]}, {"name":"Feedback", "type":"resource", "data":[105, 35, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"fpga_reg.cpp:91", "type":"resource", "data":[65, 0, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":91}]]}, {"name":"fpga_reg.cpp:92", "type":"resource", "data":[40, 35, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":92}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 1], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"fpga_reg.cpp:92", "type":"resource", "data":[8, 0, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":92}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}, {"name":"1-bit Or", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}, {"name":"4-bit Select", "type":"resource", "count":1, "data":[4, 0, 0, 0, 0]}, {"name":"7-bit Integer Compare", "type":"resource", "count":1, "data":[2, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"fpga_reg.cpp:93", "type":"resource", "data":[3022, 7, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":93}]], "children":[{"name":"32-bit Select", "type":"resource", "count":64, "data":[1664, 0, 0, 0, 0]}, {"name":"64-bit Integer Compare", "type":"resource", "count":64, "data":[1344, 0, 0, 0, 0]}, {"name":"On-chip Read-Only Memory Lookup", "type":"resource", "count":1, "data":[14, 7, 0, 0, 0], "details":[{"type":"brief", "text":"Read from 2048 bit ROM. "}, {"type":"text", "text":"Read from 2048 bit ROM. A copy of the ROM is created for each access."}]}], "replace_name":"true"}]}]}, {"name":"SimpleMath.B3", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[732, 4201, 3, 0, 108], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[732, 4201, 3, 0, 108]}]}, {"name":"Feedback", "type":"resource", "data":[105, 35, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[31, 0, 0, 0, 0]}, {"name":"fpga_reg.cpp:91", "type":"resource", "data":[34, 0, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":91}]]}, {"name":"fpga_reg.cpp:97", "type":"resource", "data":[40, 35, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":97}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[20, 16, 1, 0, 7], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"No Source Line", "type":"resource", "data":[866, 320, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":0}]], "children":[{"name":"32-bit Select", "type":"resource", "count":31, "data":[866, 320, 0, 0, 0]}]}, {"name":"fpga_reg.cpp:91", "type":"resource", "data":[934, 128, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":91}]], "children":[{"name":"32-bit Select", "type":"resource", "count":33, "data":[882, 128, 0, 0, 0]}, {"name":"65-bit Select", "type":"resource", "count":1, "data":[52, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"fpga_reg.cpp:97", "type":"resource", "data":[30, 0, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":97}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}, {"name":"1-bit Or", "type":"resource", "count":5, "data":[3, 0, 0, 0, 0]}, {"name":"4-bit Select", "type":"resource", "count":1, "data":[4, 0, 0, 0, 0]}, {"name":"65-bit Integer Compare", "type":"resource", "count":1, "data":[22, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"fpga_reg.cpp:99", "type":"resource", "data":[360, 440, 13, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":99}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[360, 440, 13, 0, 0], "details":[{"type":"text", "text":"Load uses a Prefetching LSU"}, {"type":"brief", "text":"Prefetching LSU"}]}], "replace_name":"true"}, {"name":"fpga_reg.cpp:117", "type":"resource", "data":[4064, 0, 0, 96, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":117}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":128, "data":[2016, 0, 0, 0, 0]}, {"name":"32-bit Integer Multiply", "type":"resource", "count":64, "data":[2048, 0, 0, 96, 0]}], "replace_name":"true"}, {"name":"fpga_reg.cpp:139", "type":"resource", "data":[390, 2128, 0, 0, 31], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":139}]], "children":[{"name":"Store", "type":"resource", "count":1, "data":[390, 2128, 0, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}]}]}, {"name":"SimpleMath.B4", "type":"basicblock", "children":[{"name":"Feedback", "type":"resource", "data":[5, 8, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[5, 8, 0, 0, 0]}]}]}]}]};
var area_srcJSON={"children":[{"children":[{"data":[179950,358572,492,123,0],"details":[{"text":"Platform interface logic.","type":"text"}],"name":"Board interface","type":"resource"}],"name":"Static Partition","type":"partition"},{"data":[5034,9568,52,0,0],"details":[{"text":"Global interconnect for 1 global load and 1 global store.","type":"text"},{"text":"For 1 global load and 1 global store.","type":"brief"},{"links":[{"guide":"Best Practices Guide : Global Memory Interconnect","link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}],"text":"See %L for more information","type":"text"}],"name":"Global interconnect","type":"resource"},{"data":[0,67,2,0,0],"details":[{"text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program.","type":"text"},{"text":"Contains information for the host.","type":"brief"}],"name":"System description ROM","type":"resource"},{"children":[{"data":[251,102,1,0,8],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1338,2411,0,0,10],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"data":[7,69,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 65 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 65 width by 1 depth","type":"brief"}],"name":"Coalesced Private Variables: \\n - \'LinearIndex\' (accessor.hpp:1537)\\n - \'LinearIndex\' (accessor.hpp:1523)\\n - \'i\' (fpga_reg.cpp:97)","type":"resource"},{"data":[7,36,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 32 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 32 width by 1 depth","type":"brief"}],"name":"Coalesced Private Variables: \\n - \'coeff\' (fpga_reg.cpp:91)\\n - \'tmp\' (fpga_reg.cpp:131)","type":"resource"},{"data":[1824,8147,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"127 registers of width 32 bits and depth 1","type":"text"},{"text":"Register,\\n127 regs, 32 width by 1 depth","type":"brief"}],"name":"Private Variable: \\n - \'coeff\' (fpga_reg.cpp:91)","type":"resource"},{"data":[14,79,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 7 bits and depth 1","type":"text"},{"text":"1 register of width 64 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 7 width by 1 depth,\\n1 reg, 64 width by 1 depth","type":"brief"}],"name":"Private Variable: \\n - \'i\' (fpga_reg.cpp:92)","type":"resource"},{"data":[7,68,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 64 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 64 width by 1 depth","type":"brief"}],"name":"Private Variable: \\n - \'i\' (fpga_reg.cpp:97)","type":"resource"},{"children":[{"count":"1","data":[1,66,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"97"}]],"name":"State","type":"resource"},{"count":2,"data":[88,1,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"97"}]],"name":"64-bit Integer Compare","type":"resource"},{"count":1,"data":[64,64,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"97"}]],"name":"64-bit Select","type":"resource"},{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"97"}]],"name":"1-bit And","type":"resource"},{"count":5,"data":[3,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"97"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[4,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"97"}]],"name":"4-bit Select","type":"resource"},{"count":1,"data":[22,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"97"}]],"name":"65-bit Integer Compare","type":"resource"}],"data":[183,131,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":97}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp:97","type":"resource"},{"children":[{"count":2,"data":[732,4204,3,0,108],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"},{"count":31,"data":[866,320,0,0,0],"debug":[[{"filename":"","line":0}]],"name":"32-bit Select","type":"resource"}],"data":[1598,4524,3,0,108],"name":"No Source Line","type":"resource"},{"children":[{"count":"1","data":[0,2048,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"93"}]],"name":"State","type":"resource"},{"count":64,"data":[1664,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"93"}]],"name":"32-bit Select","type":"resource"},{"count":64,"data":[1344,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"93"}]],"name":"64-bit Integer Compare","type":"resource"},{"count":1,"data":[14,7,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"93"}]],"name":"On-chip Read-Only Memory Lookup","type":"resource"}],"data":[3022,2055,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":93}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp:93","type":"resource"},{"children":[{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"92"}]],"name":"1-bit And","type":"resource"},{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"92"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[4,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"92"}]],"name":"4-bit Select","type":"resource"},{"count":1,"data":[2,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"92"}]],"name":"7-bit Integer Compare","type":"resource"}],"data":[8,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":92}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp:92","replace_name":"true","type":"resource"},{"children":[{"count":33,"data":[882,128,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"91"}]],"name":"32-bit Select","type":"resource"},{"count":1,"data":[52,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"91"}]],"name":"65-bit Select","type":"resource"}],"data":[934,128,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":91}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp:91","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[360,440,13,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"99"}]],"name":"Load","type":"resource"}],"data":[360,440,13,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":99}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp:99","replace_name":"true","type":"resource"},{"children":[{"count":128,"data":[2016,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"117"}]],"name":"32-bit Integer Add","type":"resource"},{"count":64,"data":[2048,0,0,96,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"117"}]],"name":"32-bit Integer Multiply","type":"resource"}],"data":[4064,0,0,96,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":117}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp:117","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[390,2128,0,0,31],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":"139"}]],"name":"Store","type":"resource"}],"data":[390,2128,0,0,31],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp","line":139}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp:139","replace_name":"true","type":"resource"}],"compute_units":1,"data":[14007,20318,17,96,157],"debug":[[{"filename":"fpga_reg.cpp","line":91}]],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"SimpleMath","total_kernel_resources":[14007,20318,17,96,157],"total_percent":[2.99774,2.00691,1.18902,0.626613,6.32411],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[19041,29953,71,96,157],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"Kernel System","total":[198991,388525,563,219,157],"total_percent":[44.9301,23.6577,22.7367,20.7519,14.4269],"type":"module"};
var mavJSON={"nodes":[{"type":"kernel", "id":2, "name":"SimpleMath", "children":[{"type":"bb", "id":3, "name":"SimpleMath.B0", "details":[{"type":"table", "Latency":"2"}]}, {"type":"bb", "id":4, "name":"SimpleMath.B1", "details":[{"type":"table", "Latency":"1"}]}, {"type":"bb", "id":5, "name":"SimpleMath.B2", "details":[{"type":"table", "Latency":"5", "II":"1", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":"", "Loops To":"5"}]}, {"type":"bb", "id":6, "name":"SimpleMath.B3", "children":[{"type":"inst", "id":8, "name":"Load", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":99}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Prefetching", "Stall-free":"No", "Start Cycle":"5", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":9, "name":"Store", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":139}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"79", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":10, "name":"Loop Input", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":97}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"11"}]}, {"type":"inst", "id":11, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"81", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"81", "II":"1", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":""}]}, {"type":"bb", "id":7, "name":"SimpleMath.B4", "details":[{"type":"table", "Latency":"0"}]}]}, {"type":"memtype", "id":1, "name":"Global Memory", "children":[{"type":"memsys", "id":12, "name":"DDR", "details":[{"type":"table", "Number of banks":"2"}]}]}], "links":[{"from":5, "to":4}, {"from":5, "to":5}, {"from":3, "to":5}, {"from":11, "to":10}, {"from":4, "to":10}, {"from":8, "to":11}, {"from":9, "to":11}, {"from":11, "to":7}, {"from":10, "to":8}, {"from":8, "to":9}, {"from":9, "to":12}, {"from":12, "to":8}]};
var loopsJSON={"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Kernel: SimpleMath", "data":["", "", ""], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":87}]], "details":[{"type":"brief", "text":"Single work-item execution"}, {"type":"text", "text":"Single work-item execution"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/ipp1476408832230.html"}]}], "children":[{"name":"SimpleMath.B2", "data":["Yes", "1", "3"], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":92}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Hyper-Optimized loop structure: n/a"}, {"type":"text", "text":"Stallable instruction: None"}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Loops in a Single Work-Item Kernel", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/wfa1476380079940.html"}]}], "children":[]}, {"name":"SimpleMath.B3", "data":["Yes", "~1", "3"], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":97}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Hyper-Optimized loop structure: n/a"}, {"type":"text", "text":"II is an approximation due to the following stallable instructions:", "details":[{"type":"text", "text":"Load Operation (%L)", "links":[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":"99"}]}, {"type":"text", "text":"Store Operation (%L)", "links":[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":"139"}]}]}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Loops in a Single Work-Item Kernel", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/wfa1476380079940.html"}]}], "children":[{"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"fpga_reg.cpp", "line":105}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"fpga_reg.cpp", "line":133}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}]}]}]};
var loop_attrJSON={"name":"loop_attributes", "id":4294967295, "nodes":[{"name":"k0_ZTS10SimpleMath", "id":4191856784, "clk":"No", "fmax":"240.00", "type":"kernel", "children":[{"name":"SimpleMath.B0", "id":4190775888, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"2.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"SimpleMath.B2", "id":4190777072, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"5.000000", "mi":"1", "pl":"Yes", "tc":"64", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":92}]], "type":"loop"}, {"name":"SimpleMath.B1", "id":4190776992, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"1.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"SimpleMath.B3", "id":4190777152, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"81.000000", "mi":"1", "pl":"Yes", "tc":"0", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "line":97}]], "type":"loop"}, {"name":"SimpleMath.B4", "id":4190777232, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"1.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}]};
var summaryJSON={"performanceSummary":{"name":"Kernel Summary", "columns":["Kernel Name", "Kernel Type", "Autorun", "Workgroup Size", "# Compute Units"], "children":[{"name":"SimpleMath", "data":["Single work-item", "No", [1, 1, 1], 1], "details":[{"type":"text", "text":"Kernel type: Single work-item"}, {"type":"text", "text":"Required workgroup size: (1, 1, 1)"}, {"type":"text", "text":"Maximum workgroup size: 1"}], "debug":[[{"filename":"", "line":0}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Kernel Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"SimpleMath", "data":[14007, 20318, 17, 96, 157], "debug":[[{"filename":"", "line":0}]]}, {"name":"Global Interconnect", "classes":["summary-highlight", "nohover"], "data":[5034, 9568, 52, 0, 0]}, {"name":"Board Interface", "classes":["summary-highlight", "nohover"], "data":[179950, 358572, 492, 123, 0]}, {"name":"System description ROM", "classes":["summary-highlight", "nohover"], "data":[0, 67, 2, 0, 0]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[198991, 388525, 563, 219, 157], "data_percent":[23.2901, 22.7367, 20.7519, 14.4269]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[]}};
var warningsJSON={"nodes":[]};
var fileJSON=[{"path":"/glob/development-tools/versions/oneapi/gold/inteloneapi/dev-utilities/2021.1.1/include/dpc_common.hpp", "name":"dpc_common.hpp", "has_active_debug_locs":false, "absName":"/glob/development-tools/versions/oneapi/gold/inteloneapi/dev-utilities/2021.1.1/include/dpc_common.hpp", "content":"//==============================================================\012// Copyright © 2020 Intel Corporation\012//\012// SPDX-License-Identifier: MIT\012// =============================================================\012\012#ifndef _DP_HPP\012#define _DP_HPP\012\012#pragma once\012\012#include <stdlib.h>\012#include <exception>\012\012#include <CL/sycl.hpp>\012\012namespace dpc_common {\012// this exception handler with catch async exceptions\012static auto exception_handler = [](cl::sycl::exception_list eList) {\012  for (std::exception_ptr const &e : eList) {\012    try {\012      std::rethrow_exception(e);\012    } catch (std::exception const &e) {\012#if _DEBUG\012      std::cout << \"Failure\" << std::endl;\012#endif\012      std::terminate();\012    }\012  }\012};\012\012// The TimeInterval is a simple RAII class.\012// Construct the timer at the point you want to start timing.\012// Use the Elapsed() method to return time since construction.\012\012class TimeInterval {\012 public:\012  TimeInterval() : start_(std::chrono::steady_clock::now()) {}\012\012  double Elapsed() {\012    auto now = std::chrono::steady_clock::now();\012    return std::chrono::duration_cast<Duration>(now - start_).count();\012  }\012\012 private:\012  using Duration = std::chrono::duration<double>;\012  std::chrono::steady_clock::time_point start_;\012};\012\012};  // namespace dpc_common\012\012#endif\012"}, {"path":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "name":"fpga_reg.cpp", "has_active_debug_locs":false, "absName":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/Features/fpga_reg/build/src/fpga_reg.cpp", "content":"//==============================================================\012// Copyright Intel Corporation\012//\012// SPDX-License-Identifier: MIT\012// =============================================================\012#include <CL/sycl.hpp>\012#include <CL/sycl/INTEL/fpga_extensions.hpp>\012#include <iomanip>\012#include <iostream>\012#include <vector>\012\012// dpc_common.hpp can be found in the dev-utilities include folder.\012// e.g., $ONEAPI_ROOT/dev-utilities//include/dpc_common.hpp\012#include \"dpc_common.hpp\"\012\012using namespace sycl;\012using namespace std;\012\012// Artificial coefficient and offset data for our math function\012constexpr size_t kSize = 64;\012constexpr int kCoeff[kSize] = {\012            1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,\012            17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\012            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\012            49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64};\012constexpr int kOffset[kSize] = {\012            17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\012            49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\012            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\012            16, 15, 14, 13, 12, 11, 10,  9,  8,  7,  6,  5,  4,  3,  2,  1};\012\012// The function our kernel will compute\012// The \"golden result\" will be computed on the host to check the kernel result.\012vector<int> GoldenResult(vector<int> vec) {\012\012  // The coefficients will be modified with each iteration of the outer loop.\012  int coeff[kSize];\012  for (size_t i = 0; i < kSize; i++) {\012    coeff[i] = kCoeff[i];\012  }\012\012  for (int &val : vec) {\012    // Do some arithmetic\012    int acc = 0;\012    for (size_t i = 0; i < kSize; i++) {\012      acc += coeff[i] * (val + kOffset[i]);\012    }\012\012    // Update coeff by rotating the values of the array\012    int tmp = coeff[0];\012    for (size_t i = 0; i < kSize - 1; i++) {\012      coeff[i] = coeff[i + 1];\012    }\012    coeff[kSize - 1] = tmp;\012\012    // Result\012    val = acc;\012  }\012\012  return vec;\012}\012\012// Forward declaration of the kernel name\012// (This will become unnecessary in a future compiler version.)\012class SimpleMath;\012\012void RunKernel(const device_selector &selector,\012               const std::vector<int> &vec_a,\012               std::vector<int> &vec_r) {\012\012  size_t input_size = vec_a.size();\012\012  try {\012    queue q(selector, dpc_common::exception_handler,\012            property::queue::enable_profiling{});\012\012    buffer device_a(vec_a);\012    buffer device_r(vec_r);\012\012    event e = q.submit([&](handler &h) {\012      accessor a(device_a, h, read_only);\012      accessor r(device_r, h, write_only, noinit);\012\012      // FPGA-optimized kernel\012      // Using kernel_args_restrict tells the compiler that the input\012      // and output buffers won't alias.\012      h.single_task<class SimpleMath>([=]() [[intel::kernel_args_restrict]] {\012\012        // Force the compiler to implement the coefficient array in FPGA\012        // pipeline registers rather than in on-chip memory.\012        [[intel::fpga_register]] int coeff[kSize];\012        for (size_t i = 0; i < kSize; i++) {\012          coeff[i] = kCoeff[i];\012        }\012\012        // The compiler will pipeline the outer loop.\012        for (size_t i = 0; i < input_size; ++i) {\012          int acc = 0;\012          int val = a[i];\012\012          // Fully unroll the accumulator loop.\012          // All of the unrolled operations can be freely scheduled by the\012          // DPC++ compiler's FPGA backend as part of a common data pipeline.\012          #pragma unroll\012          for (size_t j = 0; j < kSize; j++) {\012#ifdef USE_FPGA_REG\012            // Use fpga_reg to insert a register between the copy of val used\012            // in each unrolled iteration.\012            val = INTEL::fpga_reg(val);\012            // Since val is held constant across the kSize unrolled iterations,\012            // the FPGA hardware structure of val's distribution changes from a\012            // kSize-way fanout (without fpga_reg) to a chain of of registers\012            // with intermediate tap offs. Refer to the diagram in the README.\012\012            // Use fpga_reg to insert a register between each step in the acc\012            // adder chain.\012            acc = INTEL::fpga_reg(acc) + (coeff[j] * (val + kOffset[j]));\012            // This transforms a compiler-inferred adder tree into an adder\012            // chain, altering the structure of the pipeline. Refer to the\012            // diagram in the README.\012#else\012            // Without fpga_reg, the compiler schedules the operations here\012            // according to its default optimization heuristics.\012            acc += (coeff[j] * (val + kOffset[j]));\012#endif\012          }\012\012          // Rotate the values of the coefficient array.\012          // The loop is fully unrolled. This is a canonical code structure;\012          // the DPC++ compiler's FPGA backend infers a shift register here.\012          int tmp = coeff[0];\012          #pragma unroll\012          for (size_t j = 0; j < kSize - 1; j++) {\012            coeff[j] = coeff[j + 1];\012          }\012          coeff[kSize - 1] = tmp;\012\012          // Result\012          r[i] = acc;\012        }\012      });\012    });\012\012    // Measure kernel execution time\012    double start = e.get_profiling_info<info::event_profiling::command_start>();\012    double end = e.get_profiling_info<info::event_profiling::command_end>();\012    // Convert from nanoseconds to milliseconds.\012    double kernel_time = (end - start) * 1e-6;\012\012    // Kernel consists of two nested loops with 3 operations in the innermost\012    // loop: 2 additions and 1 multiplication operation.\012    size_t num_ops_per_kernel = input_size * kSize * 3;\012    cout << \"Throughput for kernel with input size \" << input_size\012         << \" and coefficient array size \" << kSize << \": \";\012    cout << std::fixed << std::setprecision(6)\012         << ((double)num_ops_per_kernel / kernel_time) / 1.0e6 << \" GFlops\\n\";\012\012  } catch (sycl::exception const &e) {\012    // Catches exceptions in the host code\012    std::cerr << \"Caught a SYCL host exception:\\n\" << e.what() << \"\\n\";\012\012    // Most likely the runtime couldn't find FPGA hardware!\012    if (e.get_cl_code() == CL_DEVICE_NOT_FOUND) {\012      std::cerr << \"If you are targeting an FPGA, please ensure that your \"\012                   \"system has a correctly configured FPGA board.\\n\";\012      std::cerr << \"Run sys_check in the oneAPI root directory to verify.\\n\";\012      std::cerr << \"If you are targeting the FPGA emulator, compile with \"\012                   \"-DFPGA_EMULATOR.\\n\";\012    }\012    std::terminate();\012  }\012}\012\012int main(int argc, char *argv[]) {\012  size_t input_size = 1e6;\012\012  // Optional command line override of default input size\012  if (argc > 1) {\012    string option(argv[1]);\012    if (option == \"-h\" || option == \"--help\") {\012      cout << \"Usage: \\n<executable> <input data size>\\n\\nFAILED\\n\";\012      return 1;\012    } else {\012      input_size = stoi(option);\012    }\012  }\012\012  // Initialize input vector\012  constexpr int max_val = 1<<10; // Conservative max to avoid integer overflow\012  vector<int> vec_a(input_size);\012  for (size_t i = 0; i < input_size; i++) {\012    vec_a[i] = rand() % max_val;\012  }\012  // Kernel result vector\012  vector<int> vec_r(input_size);\012\012  // Run the kernel on either the FPGA emulator, or FPGA\012#if defined(FPGA_EMULATOR)\012  INTEL::fpga_emulator_selector selector;\012#else\012  INTEL::fpga_selector selector;\012#endif\012  RunKernel(selector, vec_a, vec_r);\012\012  // Test the results.\012  vector<int> golden_ref = GoldenResult(vec_a);\012  bool correct = true;\012  for (size_t i = 0; i < input_size; i++) {\012    if (vec_r[i] != golden_ref[i]) {\012      cout << \"Found mismatch at \" << i << \", \"\012           << vec_r[i] << \" != \" << golden_ref[i] << \"\\n\";\012      correct = false;\012    }\012  }\012\012  if (correct) {\012    cout << \"PASSED: Results are correct.\\n\";\012  } else {\012    cout << \"FAILED: Results are incorrect.\\n\";\012    return 1;\012  }\012\012  return 0;\012}\012"}];
var alpha_viewer=false;