var areaJSON={"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[42.729, 22.2134, 21.8412, 21.4154, 8.3004], "total":[187751, 373223, 581, 126, 102], "name":"Kernel System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"Static Partition", "type":"partition", "children":[{"name":"Board interface", "type":"resource", "data":[179950, 358572, 492, 123, 0], "details":[{"type":"text", "text":"Platform interface logic."}]}]}, {"name":"Global interconnect", "type":"resource", "data":[2295, 2568, 61, 0, 0], "details":[{"type":"text", "text":"Global interconnect for 2 global loads and 2 global stores. Reduce number of global loads and stores to simplify global interconnect."}, {"type":"brief", "text":"For 2 global loads and 2 global stores."}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Global Memory Interconnect", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}]}]}, {"name":"System description ROM", "type":"resource", "data":[0, 67, 2, 0, 0], "details":[{"type":"text", "text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program."}, {"type":"brief", "text":"Contains information for the host."}]}, {"name":"ExplicitKernel", "compute_units":1, "type":"function", "total_percent":[0.758575, 0.441596, 0.351592, 0.479174, 0.131752], "total_kernel_resources":[2753, 6008, 13, 1.5, 51], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1338, 2411, 0, 0, 10], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"Private Variable: \\n - \'i\' (explicit_data_movement.cpp:103)", "type":"resource", "data":[14, 137, 0, 0, 0], "debug":[[{"filename":"explicit_data_movement.cpp", "line":103}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 64 bits and depth 1"}, {"type":"text", "text":"1 register of width 65 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 64 width by 1 depth,\\n1 reg, 65 width by 1 depth"}]}, {"name":"ExplicitKernel.B0", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[2, 66, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"explicit_data_movement.cpp:103", "type":"resource", "data":[2, 66, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":103}]]}]}, {"name":"Feedback", "type":"resource", "data":[8, 2, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[8, 2, 0, 0, 0]}]}, {"name":"Computation", "type":"resource", "children":[{"name":"explicit_data_movement.cpp:103", "type":"resource", "data":[152, 65, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":103}]], "children":[{"name":"64-bit Integer Compare", "type":"resource", "count":2, "data":[88, 1, 0, 0, 0]}, {"name":"64-bit Select", "type":"resource", "count":1, "data":[64, 64, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"ExplicitKernel.B1", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[271, 511, 0, 0, 1], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[271, 511, 0, 0, 1]}]}, {"name":"Feedback", "type":"resource", "data":[41, 35, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"explicit_data_movement.cpp:103", "type":"resource", "data":[41, 35, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":103}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 9], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"explicit_data_movement.cpp:103", "type":"resource", "data":[82, 0, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":103}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}, {"name":"1-bit Or", "type":"resource", "count":5, "data":[3, 0, 0, 0, 0]}, {"name":"4-bit Select", "type":"resource", "count":1, "data":[4, 0, 0, 0, 0]}, {"name":"65-bit Integer Compare", "type":"resource", "count":1, "data":[22, 0, 0, 0, 0]}, {"name":"65-bit Select", "type":"resource", "count":1, "data":[52, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"explicit_data_movement.cpp:104", "type":"resource", "data":[832, 2767, 13, 1.5, 31], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":104}]], "children":[{"name":"32-bit Integer Multiply", "type":"resource", "count":1, "data":[82, 199, 0, 1.5, 0]}, {"name":"Load", "type":"resource", "count":1, "data":[360, 440, 13, 0, 0], "details":[{"type":"text", "text":"Load uses a Prefetching LSU"}, {"type":"brief", "text":"Prefetching LSU"}]}, {"name":"Store", "type":"resource", "count":1, "data":[390, 2128, 0, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}]}]}, {"name":"ExplicitKernel.B2", "type":"basicblock", "children":[{"name":"Feedback", "type":"resource", "data":[5, 8, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[5, 8, 0, 0, 0]}]}]}]}, {"name":"ImplicitKernel", "compute_units":1, "type":"function", "total_percent":[0.758575, 0.441596, 0.351592, 0.479174, 0.131752], "total_kernel_resources":[2753, 6008, 13, 1.5, 51], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1338, 2411, 0, 0, 10], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"Coalesced Private Variables: \\n - \'i\' (explicit_data_movement.cpp:43)\\n - \'LinearIndex\' (accessor.hpp:1537)\\n - \'LinearIndex\' (accessor.hpp:1523)", "type":"resource", "data":[7, 69, 0, 0, 0], "debug":[[{"filename":"accessor.hpp", "line":1523}], [{"filename":"accessor.hpp", "line":1537}], [{"filename":"explicit_data_movement.cpp", "line":43}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 65 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 65 width by 1 depth"}]}, {"name":"Private Variable: \\n - \'i\' (explicit_data_movement.cpp:43)", "type":"resource", "data":[7, 68, 0, 0, 0], "debug":[[{"filename":"explicit_data_movement.cpp", "line":43}]], "details":[{"type":"text", "text":"Type: Register"}, {"type":"text", "text":"1 register of width 64 bits and depth 1"}, {"type":"brief", "text":"Register,\\n1 reg, 64 width by 1 depth"}]}, {"name":"ImplicitKernel.B0", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[2, 66, 0, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"explicit_data_movement.cpp:43", "type":"resource", "data":[2, 66, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":43}]]}]}, {"name":"Feedback", "type":"resource", "data":[8, 2, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[8, 2, 0, 0, 0]}]}, {"name":"Computation", "type":"resource", "children":[{"name":"explicit_data_movement.cpp:43", "type":"resource", "data":[152, 65, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":43}]], "children":[{"name":"64-bit Integer Compare", "type":"resource", "count":2, "data":[88, 1, 0, 0, 0]}, {"name":"64-bit Select", "type":"resource", "count":1, "data":[64, 64, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"ImplicitKernel.B1", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[271, 511, 0, 0, 1], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[271, 511, 0, 0, 1]}]}, {"name":"Feedback", "type":"resource", "data":[41, 35, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"explicit_data_movement.cpp:43", "type":"resource", "data":[41, 35, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":43}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[8, 6, 0, 0, 9], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"explicit_data_movement.cpp:43", "type":"resource", "data":[82, 0, 0, 0, 0], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":43}]], "children":[{"name":"1-bit And", "type":"resource", "count":1, "data":[1, 0, 0, 0, 0]}, {"name":"1-bit Or", "type":"resource", "count":5, "data":[3, 0, 0, 0, 0]}, {"name":"4-bit Select", "type":"resource", "count":1, "data":[4, 0, 0, 0, 0]}, {"name":"65-bit Integer Compare", "type":"resource", "count":1, "data":[22, 0, 0, 0, 0]}, {"name":"65-bit Select", "type":"resource", "count":1, "data":[52, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"explicit_data_movement.cpp:44", "type":"resource", "data":[832, 2767, 13, 1.5, 31], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":44}]], "children":[{"name":"32-bit Integer Multiply", "type":"resource", "count":1, "data":[82, 199, 0, 1.5, 0]}, {"name":"Load", "type":"resource", "count":1, "data":[360, 440, 13, 0, 0], "details":[{"type":"text", "text":"Load uses a Prefetching LSU"}, {"type":"brief", "text":"Prefetching LSU"}]}, {"name":"Store", "type":"resource", "count":1, "data":[390, 2128, 0, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}]}]}, {"name":"ImplicitKernel.B2", "type":"basicblock", "children":[{"name":"Feedback", "type":"resource", "data":[5, 8, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[5, 8, 0, 0, 0]}]}]}]}]};
var area_srcJSON={"children":[{"children":[{"data":[179950,358572,492,123,0],"details":[{"text":"Platform interface logic.","type":"text"}],"name":"Board interface","type":"resource"}],"name":"Static Partition","type":"partition"},{"data":[2295,2568,61,0,0],"details":[{"text":"Global interconnect for 2 global loads and 2 global stores. Reduce number of global loads and stores to simplify global interconnect.","type":"text"},{"text":"For 2 global loads and 2 global stores.","type":"brief"},{"links":[{"guide":"Best Practices Guide : Global Memory Interconnect","link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}],"text":"See %L for more information","type":"text"}],"name":"Global interconnect","type":"resource"},{"data":[0,67,2,0,0],"details":[{"text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program.","type":"text"},{"text":"Contains information for the host.","type":"brief"}],"name":"System description ROM","type":"resource"},{"children":[{"data":[62,51,0,0,9],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1338,2411,0,0,10],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"data":[14,137,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 64 bits and depth 1","type":"text"},{"text":"1 register of width 65 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 64 width by 1 depth,\\n1 reg, 65 width by 1 depth","type":"brief"}],"name":"Private Variable: \\n - \'i\' (explicit_data_movement.cpp:103)","type":"resource"},{"children":[{"count":"1","data":[2,66,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"State","type":"resource"},{"count":2,"data":[88,1,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"64-bit Integer Compare","type":"resource"},{"count":1,"data":[64,64,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"64-bit Select","type":"resource"},{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"1-bit And","type":"resource"},{"count":5,"data":[3,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[4,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"4-bit Select","type":"resource"},{"count":1,"data":[22,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"65-bit Integer Compare","type":"resource"},{"count":1,"data":[52,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"103"}]],"name":"65-bit Select","type":"resource"}],"data":[236,131,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":103}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp:103","type":"resource"},{"children":[{"count":"1","data":[271,511,0,0,1],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"}],"data":[271,511,0,0,1],"name":"No Source Line","type":"resource"},{"children":[{"count":1,"data":[82,199,0,1.5,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"104"}]],"name":"32-bit Integer Multiply","type":"resource"},{"count":1,"data":[360,440,13,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"104"}]],"name":"Load","type":"resource"},{"count":1,"data":[390,2128,0,0,31],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"104"}]],"name":"Store","type":"resource"}],"data":[832,2767,13,1.5,31],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":104}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp:104","replace_name":"true","type":"resource"}],"compute_units":1,"data":[2753,6008,13,1.5,51],"debug":[[{"filename":"explicit_data_movement.cpp","line":103}]],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"ExplicitKernel","total_kernel_resources":[2753,6008,13,1.5,51],"total_percent":[0.758575,0.441596,0.351592,0.479174,0.131752],"type":"function"},{"children":[{"data":[62,51,0,0,9],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1338,2411,0,0,10],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"data":[7,69,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 65 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 65 width by 1 depth","type":"brief"}],"name":"Coalesced Private Variables: \\n - \'i\' (explicit_data_movement.cpp:43)\\n - \'LinearIndex\' (accessor.hpp:1537)\\n - \'LinearIndex\' (accessor.hpp:1523)","type":"resource"},{"data":[7,68,0,0,0],"details":[{"text":"Type: Register","type":"text"},{"text":"1 register of width 64 bits and depth 1","type":"text"},{"text":"Register,\\n1 reg, 64 width by 1 depth","type":"brief"}],"name":"Private Variable: \\n - \'i\' (explicit_data_movement.cpp:43)","type":"resource"},{"children":[{"count":"1","data":[2,66,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"State","type":"resource"},{"count":2,"data":[88,1,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"64-bit Integer Compare","type":"resource"},{"count":1,"data":[64,64,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"64-bit Select","type":"resource"},{"count":1,"data":[1,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"1-bit And","type":"resource"},{"count":5,"data":[3,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[4,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"4-bit Select","type":"resource"},{"count":1,"data":[22,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"65-bit Integer Compare","type":"resource"},{"count":1,"data":[52,0,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"43"}]],"name":"65-bit Select","type":"resource"}],"data":[236,131,0,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":43}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp:43","type":"resource"},{"children":[{"count":"1","data":[271,511,0,0,1],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"}],"data":[271,511,0,0,1],"name":"No Source Line","type":"resource"},{"children":[{"count":1,"data":[82,199,0,1.5,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"44"}]],"name":"32-bit Integer Multiply","type":"resource"},{"count":1,"data":[360,440,13,0,0],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"44"}]],"name":"Load","type":"resource"},{"count":1,"data":[390,2128,0,0,31],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":"44"}]],"name":"Store","type":"resource"}],"data":[832,2767,13,1.5,31],"debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp","line":44}]],"name":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp:44","replace_name":"true","type":"resource"}],"compute_units":1,"data":[2753,6008,13,1.5,51],"debug":[[{"filename":"explicit_data_movement.cpp","line":43}]],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"ImplicitKernel","total_kernel_resources":[2753,6008,13,1.5,51],"total_percent":[0.758575,0.441596,0.351592,0.479174,0.131752],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[7801,14651,89,3,102],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"Kernel System","total":[187751,373223,581,126,102],"total_percent":[42.729,22.2134,21.8412,21.4154,8.3004],"type":"module"};
var mavJSON={"nodes":[{"type":"kernel", "id":2, "name":"ExplicitKernel", "children":[{"type":"bb", "id":3, "name":"ExplicitKernel.B0", "details":[{"type":"table", "Latency":"2"}]}, {"type":"bb", "id":4, "name":"ExplicitKernel.B1", "children":[{"type":"inst", "id":6, "name":"Load", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":104}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Prefetching", "Stall-free":"No", "Start Cycle":"5", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":7, "name":"Store", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":104}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"11", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":8, "name":"Loop Input", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":103}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"9"}]}, {"type":"inst", "id":9, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"13", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"13", "II":"1", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":""}]}, {"type":"bb", "id":5, "name":"ExplicitKernel.B2", "details":[{"type":"table", "Latency":"0"}]}]}, {"type":"kernel", "id":11, "name":"ImplicitKernel", "children":[{"type":"bb", "id":12, "name":"ImplicitKernel.B0", "details":[{"type":"table", "Latency":"2"}]}, {"type":"bb", "id":13, "name":"ImplicitKernel.B1", "children":[{"type":"inst", "id":15, "name":"Load", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":44}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Prefetching", "Stall-free":"No", "Start Cycle":"5", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":16, "name":"Store", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":44}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"11", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":17, "name":"Loop Input", "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":43}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"18"}]}, {"type":"inst", "id":18, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"13", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"13", "II":"1", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":""}]}, {"type":"bb", "id":14, "name":"ImplicitKernel.B2", "details":[{"type":"table", "Latency":"0"}]}]}, {"type":"memtype", "id":1, "name":"Global Memory", "children":[{"type":"memsys", "id":10, "name":"DDR", "details":[{"type":"table", "Number of banks":"2"}]}]}], "links":[{"from":9, "to":8}, {"from":3, "to":8}, {"from":6, "to":9}, {"from":7, "to":9}, {"from":9, "to":5}, {"from":8, "to":6}, {"from":6, "to":7}, {"from":7, "to":10}, {"from":10, "to":6}, {"from":18, "to":17}, {"from":12, "to":17}, {"from":15, "to":18}, {"from":16, "to":18}, {"from":18, "to":14}, {"from":17, "to":15}, {"from":15, "to":16}, {"from":10, "to":15}, {"from":16, "to":10}]};
var loopsJSON={"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Kernel: ExplicitKernel", "data":["", "", ""], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":97}]], "details":[{"type":"brief", "text":"Single work-item execution"}, {"type":"text", "text":"Single work-item execution"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/ipp1476408832230.html"}]}], "children":[{"name":"ExplicitKernel.B1", "data":["Yes", "~1", "3"], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":103}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Hyper-Optimized loop structure: n/a"}, {"type":"text", "text":"II is an approximation due to the following stallable instructions:", "details":[{"type":"text", "text":"Load Operation (%L)", "links":[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":"104"}]}, {"type":"text", "text":"Store Operation (%L)", "links":[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":"104"}]}]}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Loops in a Single Work-Item Kernel", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/wfa1476380079940.html"}]}], "children":[]}]}, {"name":"Kernel: ImplicitKernel", "data":["", "", ""], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":42}]], "details":[{"type":"brief", "text":"Single work-item execution"}, {"type":"text", "text":"Single work-item execution"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/ipp1476408832230.html"}]}], "children":[{"name":"ImplicitKernel.B1", "data":["Yes", "~1", "3"], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":43}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Hyper-Optimized loop structure: n/a"}, {"type":"text", "text":"II is an approximation due to the following stallable instructions:", "details":[{"type":"text", "text":"Load Operation (%L)", "links":[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":"44"}]}, {"type":"text", "text":"Store Operation (%L)", "links":[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":"44"}]}]}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Loops in a Single Work-Item Kernel", "link":"file:////glob/development-tools/versions/oneapi/gold/inteloneapi/compiler/2021.1.2/linux/lib/oclfpga/aoc_help_pages/wfa1476380079940.html"}]}], "children":[]}]}]};
var loop_attrJSON={"name":"loop_attributes", "id":4294967295, "nodes":[{"name":"k0_ZTS14ExplicitKernel", "id":3025760512, "clk":"No", "fmax":"240.00", "type":"kernel", "children":[{"name":"ExplicitKernel.B0", "id":3025238096, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"2.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"ExplicitKernel.B1", "id":3025238496, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"13.000000", "mi":"1", "pl":"Yes", "tc":"0", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":103}]], "type":"loop"}, {"name":"ExplicitKernel.B2", "id":3025238576, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"1.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}, {"name":"k1_ZTS14ImplicitKernel", "id":3025294736, "clk":"No", "fmax":"240.00", "type":"kernel", "children":[{"name":"ImplicitKernel.B0", "id":3025290912, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"2.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"ImplicitKernel.B1", "id":3025301264, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"13.000000", "mi":"1", "pl":"Yes", "tc":"0", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "line":43}]], "type":"loop"}, {"name":"ImplicitKernel.B2", "id":3025305968, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"1.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}]};
var summaryJSON={"performanceSummary":{"name":"Kernel Summary", "columns":["Kernel Name", "Kernel Type", "Autorun", "Workgroup Size", "# Compute Units"], "children":[{"name":"ExplicitKernel", "data":["Single work-item", "No", [1, 1, 1], 1], "details":[{"type":"text", "text":"Kernel type: Single work-item"}, {"type":"text", "text":"Required workgroup size: (1, 1, 1)"}, {"type":"text", "text":"Maximum workgroup size: 1"}], "debug":[[{"filename":"", "line":0}]]}, {"name":"ImplicitKernel", "data":["Single work-item", "No", [1, 1, 1], 1], "details":[{"type":"text", "text":"Kernel type: Single work-item"}, {"type":"text", "text":"Required workgroup size: (1, 1, 1)"}, {"type":"text", "text":"Maximum workgroup size: 1"}], "debug":[[{"filename":"", "line":0}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Kernel Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"ExplicitKernel", "data":[2753, 6008, 13, 1.5, 51], "debug":[[{"filename":"", "line":0}]]}, {"name":"ImplicitKernel", "data":[2753, 6008, 13, 1.5, 51], "debug":[[{"filename":"", "line":0}]]}, {"name":"Kernel Subtotal", "classes":["summary-highlight", "nohover"], "data":[5506, 12016, 26, 3, 102]}, {"name":"Global Interconnect", "classes":["summary-highlight", "nohover"], "data":[2295, 2568, 61, 0, 0]}, {"name":"Board Interface", "classes":["summary-highlight", "nohover"], "data":[179950, 358572, 492, 123, 0]}, {"name":"System description ROM", "classes":["summary-highlight", "nohover"], "data":[0, 67, 2, 0, 0]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[187751, 373223, 581, 126, 102], "data_percent":[21.9746, 21.8412, 21.4154, 8.3004]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[]}};
var warningsJSON={"nodes":[]};
var fileJSON=[{"path":"/glob/development-tools/versions/oneapi/gold/inteloneapi/dev-utilities/2021.1.1/include/dpc_common.hpp", "name":"dpc_common.hpp", "has_active_debug_locs":false, "absName":"/glob/development-tools/versions/oneapi/gold/inteloneapi/dev-utilities/2021.1.1/include/dpc_common.hpp", "content":"//==============================================================\012// Copyright © 2020 Intel Corporation\012//\012// SPDX-License-Identifier: MIT\012// =============================================================\012\012#ifndef _DP_HPP\012#define _DP_HPP\012\012#pragma once\012\012#include <stdlib.h>\012#include <exception>\012\012#include <CL/sycl.hpp>\012\012namespace dpc_common {\012// this exception handler with catch async exceptions\012static auto exception_handler = [](cl::sycl::exception_list eList) {\012  for (std::exception_ptr const &e : eList) {\012    try {\012      std::rethrow_exception(e);\012    } catch (std::exception const &e) {\012#if _DEBUG\012      std::cout << \"Failure\" << std::endl;\012#endif\012      std::terminate();\012    }\012  }\012};\012\012// The TimeInterval is a simple RAII class.\012// Construct the timer at the point you want to start timing.\012// Use the Elapsed() method to return time since construction.\012\012class TimeInterval {\012 public:\012  TimeInterval() : start_(std::chrono::steady_clock::now()) {}\012\012  double Elapsed() {\012    auto now = std::chrono::steady_clock::now();\012    return std::chrono::duration_cast<Duration>(now - start_).count();\012  }\012\012 private:\012  using Duration = std::chrono::duration<double>;\012  std::chrono::steady_clock::time_point start_;\012};\012\012};  // namespace dpc_common\012\012#endif\012"}, {"path":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "name":"explicit_data_movement.cpp", "has_active_debug_locs":false, "absName":"/home/u58822/One-API/oneAPI-samples/DirectProgramming/DPC++FPGA/Tutorials/DesignPatterns/my_sample/build/src/explicit_data_movement.cpp", "content":"#include <assert.h>\012#include <algorithm>\012#include <chrono>\012#include <iomanip>\012#include <random>\012#include <type_traits>\012\012#include <CL/sycl.hpp>\012#include <CL/sycl/INTEL/fpga_extensions.hpp>\012\012// dpc_common.hpp can be found in the dev-utilities include folder.\012// e.g., $ONEAPI_ROOT/dev-utilities//include/dpc_common.hpp\012#include \"dpc_common.hpp\"\012\012using namespace sycl;\012using namespace std::chrono;\012\012// Declare the kernel class name globally to avoid name mangling.\012class ImplicitKernel;\012class ExplicitKernel;\012\012//\012// This version of the kernel demonstrates implicit data movement\012// through SYCL buffers and accessors.\012//\012template<typename T>\012double SubmitImplicitKernel(queue& q, std::vector<T>& in, std::vector<T>& out,\012                            size_t size) {\012  // start the timer\012  auto start = high_resolution_clock::now();\012  \012  {\012    // set up the input and output buffers\012    buffer in_buf(in);\012    buffer out_buf(out);\012\012    // launch the computation kernel\012    auto kernel_event = q.submit([&](handler& h) {\012      accessor in_a(in_buf, h, read_only);\012      accessor out_a(out_buf, h, write_only, noinit);\012\012      h.single_task<ImplicitKernel>([=]() [[intel::kernel_args_restrict]] {\012        for (size_t  i = 0; i < size; i ++) {\012          out_a[i] = in_a[i] * i;\012        }\012      });\012    });\012  }\012  \012  // We use the scope above to synchronize the FPGA kernels.\012  // Exiting the scope will cause the buffer destructors to be called\012  // which will wait until the kernel finishes and copy the data back to the\012  // host (if the buffer was written to).\012  // Therefore, at this point in the code, we know the kernels have finished\012  // and the data has been transferred back to the host.\012\012  // stop the timer\012  auto end = high_resolution_clock::now();\012  duration<double, std::milli> diff = end - start;\012\012  return diff.count();\012}\012\012//\012// This version of the kernel demonstrates explicit data movement\012// through explicit USM.\012//\012template<typename T>\012double SubmitExplicitKernel(queue& q, std::vector<T>& in,\012                            std::vector<T>& out, size_t size) {\012  // allocate the device memory\012  T* in_ptr = malloc_device<T>(size, q);\012  T* out_ptr = malloc_device<T>(size, q);\012\012  // ensure we successfully allocated the device memory\012  if(in_ptr == nullptr) {\012    std::cerr << \"ERROR: failed to allocate space for 'in_ptr'\\n\";\012    return 0;\012  }\012  if(out_ptr == nullptr) {\012    std::cerr << \"ERROR: failed to allocate space for 'out_ptr'\\n\";\012    return 0;\012  }\012\012  // start the timer\012  auto start = high_resolution_clock::now();\012\012  // copy host input data to the device's memory\012  auto copy_host_to_device_event = q.memcpy(in_ptr, in.data(), size*sizeof(T));\012\012  // launch the the computation kernel\012  auto kernel_event = q.submit([&](handler& h) {\012    // this kernel must wait until the data is copied from the host's to\012    // the device's memory\012    h.depends_on(copy_host_to_device_event);\012\012    h.single_task<ExplicitKernel>([=]() [[intel::kernel_args_restrict]] {\012      // create device pointers to explicitly inform the compiler these\012      // pointer reside in the device's address space\012      device_ptr<T> in_ptr_d(in_ptr);\012      device_ptr<T> out_ptr_d(out_ptr);\012\012      for (size_t  i = 0; i < size; i ++) {\012        out_ptr_d[i] = in_ptr_d[i] * i;\012      }\012    });        \012  });\012\012  // copy output data back from device to host\012  auto copy_device_to_host_event = q.submit([&](handler& h) {\012    // we cannot copy the output data from the device's to the host's memory\012    // until the computation kernel has finished\012    h.depends_on(kernel_event);\012    h.memcpy(out.data(), out_ptr, size*sizeof(T));\012  });\012\012  // wait for copy back to finish\012  copy_device_to_host_event.wait();\012\012  // stop the timer\012  auto end = high_resolution_clock::now();\012  duration<double, std::milli> diff = end - start;\012\012  // free the device memory\012  // note that these are calls to sycl::free()\012  free(in_ptr, q);\012  free(out_ptr, q);\012\012  return diff.count();\012}\012\012//\012// main driver program\012//\012int main(int argc, char *argv[]) {\012  // The data type for our design. Assert that it is arithmetic.\012  // Templating allows us to easily change the data type of the entire design.\012  using Type = int;\012  static_assert(std::is_arithmetic<Type>::value);\012\012  // the default arguments\012#if defined(FPGA_EMULATOR)\012  //size_t size = 10000;\012  size_t size = 2000;\012  size_t iters = 1;\012#else\012  //size_t size = 100000000;\012  size_t size = 2000;\012  size_t iters = 5;\012#endif\012\012  // Allow the size to be changed by a command line argument\012  if (argc > 1) {\012    size = atoi(argv[1]);\012  }\012\012  // check the size\012  if (size <= 0) {\012    std::cerr << \"ERROR: size must be greater than 0\\n\";\012    return 1;\012  }\012\012  try {\012    // device selector\012#if defined(FPGA_EMULATOR)\012    INTEL::fpga_emulator_selector selector;\012#else\012    INTEL::fpga_selector selector;\012#endif\012\012    // queue properties to enable profiling\012    auto prop_list = property_list{ property::queue::enable_profiling() };\012\012    // create the device queue\012    queue q(selector, dpc_common::exception_handler, prop_list);\012\012    // make sure the device supports USM device allocations\012    device d = q.get_device();\012    if (!d.get_info<info::device::usm_device_allocations>()) {\012      std::cerr << \"ERROR: The selected device does not support USM device\"\012                << \" allocations\\n\";\012      return 1;\012    }\012\012    // input and output data\012    std::vector<Type> in(size);\012    std::vector<Type> out_gold(size), out_implicit(size), out_explicit(size);\012\012    // generate some random input data\012    std::generate(in.begin(), in.end(), [=] { return Type(rand() % 100); });\012\012    // compute gold output data\012    for (size_t i = 0; i < size; i++) {\012      out_gold[i] = in[i] * i;\012    }\012\012    // run the ImplicitKernel\012    std::cout << \"Running the ImplicitKernel with size=\" << size << \"\\n\";\012    std::vector<double> implicit_kernel_latency(iters);\012    for(size_t i = 0; i < iters; i++) {\012        implicit_kernel_latency[i] = \012            SubmitImplicitKernel<Type>(q, in, out_implicit, size);\012    }\012\012    // run the ExplicitKernel\012    std::cout << \"Running the ExplicitKernel with size=\"\012              << size << \"\\n\";\012    std::vector<double> explicit_kernel_latency(iters);\012    for(size_t i = 0; i < iters; i++) {\012        explicit_kernel_latency[i] = \012            SubmitExplicitKernel<Type>(q, in, out_explicit, size);\012    }\012\012    // validate the outputs\012    bool passed = true;\012\012    // validate ImplicitKernel output\012    for (size_t i = 0; i < size; i++) {\012      if (out_gold[i] != out_implicit[i]) {\012        std::cout << \"FAILED: mismatch at entry \" << i\012                  << \" of 'ImplicitKernel' output \"\012                  << \"(\" << out_gold[i] << \",\" << out_implicit[i] << \")\"\012                  << \"\\n\";\012        passed = false;\012      }\012    }\012    // validate ExplicitKernel kernel\012    for (size_t i = 0; i < size; i++) {\012      if (out_gold[i] != out_explicit[i]) {\012        std::cout << \"FAILED: mismatch at entry \" << i\012                  << \" of 'ExplicitKernel' kernel output \"\012                  << \"(\" << out_gold[i] << \",\" << out_explicit[i] << \")\"\012                  << \"\\n\";\012        passed = false;\012      }\012    }\012\012    if (passed) {\012      // The emulator does not accurately represent real hardware performance.\012      // Therefore, we don't show performance results when running in emulation.\012#ifndef FPGA_EMULATOR\012      double implicit_avg_lat = \012          std::accumulate(implicit_kernel_latency.begin() + 1,\012                          implicit_kernel_latency.end(), 0.0)\012                          / (double)(iters - 1);\012      double explicit_avg_lat = \012          std::accumulate(explicit_kernel_latency.begin() + 1,\012                          explicit_kernel_latency.end(), 0.0)\012                          / (double)(iters - 1);\012\012      std::cout << \"Average latency for the ImplicitKernel: \"\012                << implicit_avg_lat << \" ms\\n\";\012      std::cout << \"Average latency for the ExplicitKernel: \"\012                << explicit_avg_lat << \" ms\\n\";\012#endif\012\012      std::cout << \"PASSED\\n\";\012      return 0;\012    } else {\012      std::cout << \"FAILED\\n\";\012      return 1;\012    }\012\012  } catch (exception const& e) {\012    // Catches exceptions in the host code\012    std::cerr << \"Caught a SYCL host exception:\\n\" << e.what() << \"\\n\";\012    // Most likely the runtime couldn't find FPGA hardware!\012    if (e.get_cl_code() == CL_DEVICE_NOT_FOUND) {\012      std::cerr << \"If you are targeting an FPGA, please ensure that your \"\012                   \"system has a correctly configured FPGA board.\\n\";\012      std::cerr << \"Run sys_check in the oneAPI root directory to verify.\\n\";\012      std::cerr << \"If you are targeting the FPGA emulator, compile with \"\012                   \"-DFPGA_EMULATOR.\\n\";\012    }\012    std::terminate();\012  }\012\012  return 0;\012}\012\012\012\012\012"}];
var alpha_viewer=false;